import OpenAI from 'openai';
import { NextRequest } from 'next/server';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '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',
  baseURL: process.env.OPENAI_BASE_URL || 'https://integrate.api.nvidia.com/v1',
});

// System prompt for Instagram Brand Strategy Expert
const SYSTEM_PROMPT = `Sen Instagram'da marka stratejisi konusunda uzman bir danƒ±≈ümansƒ±n. Kullanƒ±cƒ±lara markalarƒ±nƒ± sadece bir √ºr√ºn veya hizmet saƒülayƒ±cƒ±sƒ± olarak deƒüil, bir sosyal misyon etrafƒ±nda topluluk olu≈üturan, ilham veren bir lider olarak konumlandƒ±rmalarƒ± i√ßin kapsamlƒ±, a≈üamalƒ± ve ama√ß odaklƒ± stratejiler √∂ƒüretirsin.

TEMEL FELSEFE: Sosyal misyon, i√ßeriƒüin deƒüil markanƒ±n varlƒ±k nedenidir.

ANA UZMANLIK ALANLARIN:

1. MARKA Kƒ∞MLƒ∞ƒûƒ∞ VE KONUMLANDIRMA
   - Markanƒ±n varlƒ±k nedeni belirleme
   - Sosyal misyon beyanƒ± olu≈üturma
   - Deƒüer tabanlƒ± arketip se√ßimi
   - Ni≈ü alan belirleme
   - Deƒüer odaklƒ± rakip analizi

2. ALICI VE TOPLULUK ANALƒ∞Zƒ∞
   - Deƒüer temelli persona geli≈ütirme
   - Topluluk yolculuƒüu haritalama
   - Empati haritasƒ± olu≈üturma

3. DUYGUSAL TETƒ∞KLEYƒ∞Cƒ∞LER
   - N√∂ropazarlama ilkeleri
   - Umut, aidiyet, merhamet odaklƒ± yakla≈üƒ±m
   - G√º√ßl√º duygusal baƒülar kurma

4. ƒ∞√áERƒ∞K Mƒ∞MARƒ∞Sƒ∞
   - ƒ∞√ßerik s√ºtunlarƒ± olu≈üturma
   - Format belirleme
   - Problem-√ß√∂z√ºm-g√ºven √ßer√ßevesi

5. G√ñRSEL Kƒ∞MLƒ∞K VE PROFƒ∞L
   - Otantik g√∂rsel dil
   - Renk/font psikolojisi
   - Biyografi yazƒ±mƒ±
   - √ñne √ßƒ±kanlar kurgulamasƒ±

6. PERFORMANS VE ETKƒ∞ √ñL√á√úMLEME
   - Topluluk metrikleri
   - Sosyal etki g√∂stergeleri
   - Etkile≈üim kalitesi analizi

YANITLARINDA:
- Temiz, okunabilir format kullan
- Ba≈ülƒ±klarƒ± b√ºy√ºk harflerle yaz
- Madde i≈üaretleri ve numaralandƒ±rma kullan
- √ñrnekler ver
- Uygulanabilir adƒ±mlar sun
- Emoji kullanarak g√∂rsel zenginlik kat

√ñZEL √ñZELLƒ∞K: Kullanƒ±cƒ± marka verip haftalƒ±k plan istediƒüinde, detaylƒ± 3 i√ßerikli haftalƒ±k strateji sun.

Her zaman T√ºrk√ße yanƒ±t ver ve pratik, uygulanabilir √∂neriler sun.`;

// Tools will be implemented in future versions

export async function POST(request: NextRequest) {
  console.log('üöÄ API Route called');
  
  try {
    // Check environment variables
    const hasApiKey = !!process.env.OPENAI_API_KEY;
    const baseUrl = process.env.OPENAI_BASE_URL;
    
    console.log('üîë API Key exists:', hasApiKey);
    console.log('üåê Base URL:', baseUrl);
    
    if (!hasApiKey) {
      console.error('‚ùå No API key found');
      return new Response(JSON.stringify({ 
        error: 'API key not configured' 
      }), { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    const body = await request.json();
    console.log('üìù Request received:', { 
      hasMessage: !!body.message, 
      messageLength: body.message?.length 
    });
    
    const { message, enableThinking = false, conversationHistory = [] } = body;
    
    if (!message) {
      console.log('No message provided');
      return new Response(JSON.stringify({ error: 'Message is required' }), { 
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Prepare messages with conversation history (limit to prevent token overflow)
    const messages = [
      { role: "system", content: SYSTEM_PROMPT },
      ...conversationHistory.slice(-6), // Keep last 6 messages
      { role: "user", content: message }
    ];

    console.log('Messages prepared:', messages.length);

    // Streaming response
    const stream = new ReadableStream({
      async start(controller) {
        try {
          if (enableThinking) {
            controller.enqueue(new TextEncoder().encode('ü§î **Thinking...**\n\n'));
            await new Promise(resolve => setTimeout(resolve, 300));
          }

          // Test OpenAI connection first
          console.log('Attempting OpenAI API call...');
          
          const completion = await openai.chat.completions.create({
            model: "moonshotai/kimi-k2-instruct",
            messages: messages as OpenAI.Chat.Completions.ChatCompletionMessageParam[],
            temperature: 0.6,
            max_tokens: 4096,
            stream: true
          });

          console.log('OpenAI completion started successfully');

          for await (const chunk of completion) {
            const content = chunk.choices[0]?.delta?.content || '';
            if (content) {
              controller.enqueue(new TextEncoder().encode(content));
            }
          }
          
          controller.close();
        } catch (error) {
          console.error('Stream error:', error);
          const errorMessage = `\n\n‚ùå **Error:** ${error instanceof Error ? error.message : 'Unknown error'}\n\n`;
          controller.enqueue(new TextEncoder().encode(errorMessage));
          controller.close();
        }
      }
    });

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Transfer-Encoding': 'chunked',
      },
    });
    
  } catch (error) {
    console.error('API Error:', error);
    return new Response(JSON.stringify({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}